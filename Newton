import numpy as np

def newtons_method(f, f_prime, f_double_prime, initial_guess, tolerance=1e-6, max_iterations=100):
    x = initial_guess

    for iteration in range(max_iterations):
        # Calculate the function value and its derivative
        fx = f(x)
        fpx = f_prime(x)
        fppx = f_double_prime(x)

        # Update x using Newton's method
        x -= fpx / fppx

        # Check for convergence
        if abs(fpx) < tolerance:
            break

    return x

# Example usage
def f(x):
    return x**3 - 2*x**2 + 2

def f_prime(x):
    return 3*x**2 - 4*x

def f_double_prime(x):
    return 6*x - 4

initial_guess = 1.5
tolerance = 1e-6
max_iterations = 100

optimal_solution = newtons_method(f, f_prime, f_double_prime, initial_guess, tolerance, max_iterations)
print("Optimal solution:", optimal_solution)
